export const enum FieldDefinition {
  Agency =   1,
  Checkbox = 2,
  CheckedMasterFile= 3,
  Combobox= 4,
  Date= 5,
  FunctionalSet= 6,
  GeneralVehicle= 7,
  GeoVerify= 8,
  GlobalVehicle= 9,
  GroupedControls= 10,
  HeightRange= 11,
  TextBox= 12,
  LocationSearch= 13,
  MasterFile= 14,
  MultiSelect = 15,
  Notes = 16,
  Numeric = 17,
  PartialName = 18,
  RadioButtons = 19,
  RichText = 20,
  SubjectSearch = 21,
  TextArea = 22,
  Time = 23,
  TimeRange = 24,
  TypeMakeModel = 25,
  ValidationSet = 26,
  YearBasedInput = 28,
  PhoneNumber = 29,
  ViewOnlyField = 30,
  GlobalSubject = 31,
  Height = 32,
  YearBasedCounter = 34,
  DateTime = 35,
  RecordList = 36,
  GunMakeModel = 37,
  SocialSecurityNumber = 38,
  NumericRange = 39,
  PhotoViewer = 40,
  DateRange = 41,
  GlobalSubjectContactInformation = 42,
  ScarMarkTattooType = 43,
  HyperlinkField = 44,
  FreeFormMasterFile = 45,
  ModuleSelector = 47,
  ContactInformation = 48,
  Counter = 49,
  Statute = 50,
  GeneralSubject = 51,
  GlobalGun = 52,
  Documents = 53,
  StatuteQuickView = 54,
  TypeAhead = 55,
  StatuteSearch = 56,
  Equipment = 57,
  GlobalVehicleViewer = 58,
  GlobalSubjectViewer = 59,
  Decimal = 60,
  GlobalSubjectSearch = 61,
  NarcoticsUnitTeams = 62,
  HazardousMaterialViewer = 63,
  TimeEntryViewer = 64
}
const fieldDefinitions: { [id: number]: string } = {};
fieldDefinitions[FieldDefinition.Agency] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.AgencyComboboxController({</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
    <div class="indent-options">isMultiSelect: false,</div>
    <div class="indent-options">displayInactive: true,</div>
    <div class="indent-options">filterByPermissions: {</div>
    <div class="indent-options">componentType: null,</div>
    <div class="indent-options">permissionType: PermissionType.Execute</div>
    <div class="indent-options">},</div>
    <div class="indent-options">onChange: (newValue) => this.onAgencyChanged(newValue)</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.MasterFile] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.MasterFileController({</div>
    <div class="indent-options">filter: [{ type: null , value: null }],</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">masterFileType: null,</div>
    <div class="indent-options">name: field.systemName</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.Combobox] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.ComboboxController({</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
    <div class="indent-options">dataSource: [],</div>
    <div class="indent-options">primaryDisplayField: '',</div>
    <div class="indent-options">valueField: ''</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.GeoVerify] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.GeoVerifyController({</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.Numeric] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.NumericController({</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">min: 0, // Minimum Value,</div>
    <div class="indent-options">max: 1 // Maximum Value</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.TextArea] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.TextareaController({</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
    <div class="indent-options">maxLength: 1 // Maximum Character Count,</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.ValidationSet] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.ValidationSetController({</div>
    <div class="indent-options">propertyId: field.propertyId,</div>
    <div class="indent-options">isRequired: field.isRequired,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">applyDefaultValue: shouldApplyDefault</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.TextBox] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.InputController({</div>
    <div class="indent-options">name: field.systemName,</div>
    <div class="indent-options">label: field.name,</div>
    <div class="indent-options">isRequired: field.isRequired</div>
  <div class="indent-return">}));</div>
`;
fieldDefinitions[FieldDefinition.LocationSearch] = `
  <div class="indent-return">return this._formInteropService.createField(formName, field.systemName, new this.LocationSearchController({</div>
    <div class="indent-options">name: field.systemName</div>
  <div class="indent-return">}));</div>
`;
export const FieldDefinitionTemplates = fieldDefinitions;
